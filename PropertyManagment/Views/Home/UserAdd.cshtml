@using PropertyManagment
@model PropertyManagment.User
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewBag.Title = "User";
    PropertyManagmentEntities db = new PropertyManagmentEntities();
    var users = new List<SelectListItem>();
    string type = Session["TypeManagment"].ToString();
    //if (type == "client")
    //{
    //    users = db.Users.ToList().Where(w => w.UserType.ToLower() == "agent").Select(s => new SelectListItem()
    //    {
    //        Text = "" + s.FullName + "(" + s.MobileNo + ")",
    //        Value = s.Id.ToString()
    //    }).ToList();
    //}
    if (type == "property")
    {
        users = db.Users.ToList().Where(w => w.UserType.ToLower() == "client").Select(s => new SelectListItem()
        {
            Text = "" + s.FullName + "(" + s.MobileNo + ")",
            Value = s.Id.ToString()
        }).ToList();
    }
    
        users = db.Users.ToList().Where(w => w.UserType.ToLower() == "client").Select(s => new SelectListItem()
        {
            Text = "" + s.FullName + "(" + s.MobileNo + ")",
            Value = s.Id.ToString()
        }).ToList();
    
}

@*@if (!string.IsNullOrEmpty(ViewBag.Msg))
{
    <script>
        alert('@ViewBag.Msg')
    </script>
}*@
<div class="container py-3">
    <div class="row">
        <div class="col-md-12">
            <div class="row justify-content-center">
                <div class="col-md-12">
                    <span class="anchor" id="formContact"></span>

                    <!-- form contact -->
                    <div class="card card-outline-secondary">
                        <div class="card-header">
                            <h3 class="mb-0" style="text-transform: capitalize">@(Model.Id > 0 ? "Modify" : "Add") @type</h3>
                        </div>
                        <div class="card-body">
                            @using (Html.BeginForm("UserAdd", "Home", FormMethod.Post, new { enctype = "multipart/form-data" }))
                            {
                                @Html.HiddenFor(model => model.ImagePath)
                            <div class="row">
                                <div class="col-md-4 mt-2">
                                    <div class="form-group">
                                        <label>Full Name <em>*</em></label>
                                        @Html.EditorFor(model => model.FullName, new { htmlAttributes = new { @class = "form-control required", required = "required" } })
                                        @Html.ValidationMessageFor(model => model.FullName, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                @*<div class="col-md-4  mt-2">
            <div class="form-group">
                <label>DOB <em>*</em></label>
                @Html.EditorFor(model => model.DOB, new { htmlAttributes = new { @class = "form-control datepicker required", required = "required" } })
                @Html.ValidationMessageFor(model => model.DOB, "", new { @class = "text-danger" })
            </div>
        </div>*@
                                <div class="col-md-4  mt-2">
                                    <div class="form-group">
                                        <label>Email <em>*</em></label>
                                        @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control", required = "required" } })
                                        @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="col-md-4  mt-2">
                                    <div class="form-group">
                                        <label>Mobile No <em>*</em></label>
                                        @Html.EditorFor(model => model.MobileNo, new { htmlAttributes = new { @class = "form-control", required = "required" } })
                                        @Html.ValidationMessageFor(model => model.About, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="col-md-4  mt-2">
                                    <div class="form-group">
                                        <label>About <em>*</em></label>
                                        @Html.EditorFor(model => model.About, new { htmlAttributes = new { @class = "form-control", required = "required" } })
                                        @Html.ValidationMessageFor(model => model.About, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="col-md-4  mt-2">
                                    <div class="form-group">
                                        <label>Password <em>*</em></label>
                                        @Html.EditorFor(model => model.Password, new { htmlAttributes = new { @class = "form-control required", required = "required" } })
                                        @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                @if (type != "Admin")
                                {
                                    <div class="col-md-4  mt-2">
                                        <div class="form-group">
                                            <label>@(type == "client" ? "Agent" : "Client") <em>*</em></label>
                                            @Html.DropDownListFor(model => model.RefId, users, "Select Reference", new { @class = "form-control required", required = "required" })
                                            @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                }
                                <div class="col-md-4  mt-2">
                                    <div class="form-group">
                                        <label>Photo <em>*</em></label>
                                        <input id="image" type="file" name="file" onchange="encodeImgtoBase64(this)" class="form-control" @(string.IsNullOrEmpty(Model.ImagePath) ? "required" : "" ) />
                                    </div>
                                </div>
                                <div class="col-md-4 mt-2 ">
                                    <div class="form-group">
                                        @if (!string.IsNullOrEmpty(Model.ImagePath))
                                        {
                                            <img id="base64img" src="/UploadFiles/@Model.ImagePath" width="100" height="100" />
                                        }
                                        else
                                        {
                                            <img id="base64img" width="100" height="100" />
                                        }
                                    </div>
                                </div>
                                <div class="col-md-12 mt-2">
                                    <div class="form-group">
                                        <input class="btn btn-primary btn-lg float-right" type="submit" value="@(Model.Id > 0 ? "Update": "Submit")">
                                        @*<button class="btn btn-primary btn-lg float-right" type="submit">Submit</button>*@
                                    </div>
                                </div>
                            </div>
                            }
                        </div>
                    </div><!-- /form contact -->
                </div><!--/col-->
            </div>
        </div><!--/col-->
    </div><!--/row-->
</div><!--/container-->
<!-- Scroll to Top -->
@section Scripts{
    <script>
        function encodeImgtoBase64(element) {
            var img = element.files[0];
            var reader = new FileReader();
            reader.onloadend = function () {
                $("#base64img").attr("src", reader.result)
                //$("#convertImg").text(reader.result);
            }
            reader.readAsDataURL(img);
        }
    </script>
} 